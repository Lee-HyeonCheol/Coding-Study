#include <bits/stdc++.h>
using namespace std;

int T, N;
bool visited[20000];

int getMod(int x, int a, int N) {
	return (x * 10 + a) % N;
}

string solve(int n) {
	if (n == 1)
		return "1";
	memset(visited, false, sizeof(visited));
	queue<pair<int, long long>> q; // mod, k
	q.push({ 1, 1 });
	visited[1] = true;

	int mod; long long k;

	while (!q.empty()) {
		tie(mod, k) = q.front();
		q.pop();

		if (mod == 0)
			break;

		for (int i = 0; i < 2; i++) {
			int next = getMod(mod, i, n);
			if (visited[next])
				continue;
			q.push({ next, (k << 1) + i});
			visited[next] = true;
		}
	}
	bitset<64> b(k);
	string res = b.to_string();
	res = res.substr(res.find('1'));
	return res;
}

int main(void) {
	cin >> T;
	for (int i = 0; i < T; i++) {
		cin >> N;
		cout << solve(N) << '\n';
	}
}