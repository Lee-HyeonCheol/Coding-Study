#include <bits/stdc++.h>
using namespace std;

bool board[12][12];
bool temp[12][12];
char ch;
int dy[5] = { -1, 0, 1, 0, 0 };
int dx[5] = { 0, -1, 0, 1, 0 };
int res = INT_MAX;

void switch_on(int y, int x) {
	for (int i = 0; i < 5; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];

		temp[ny][nx] = !temp[ny][nx];
	}
}

void solve(int key) {
	bitset<10> A = key;
	int cnt = 0;
	for (int i = 1; i <= 10; i++)
		for (int j = 1; j <= 10; j++)
			temp[i][j] = board[i][j];

	for (int i = 0; i < 10; i++)
		if (A[i] == 1) {
			switch_on(1, i + 1);
			cnt++;
		}

	for (int row = 2; row <= 10; row++)
		for (int col = 1; col <= 10; col++) {
			if (temp[row - 1][col] == 0)
				continue;
			cnt++;
			switch_on(row, col);
		}

	for (int i = 1; i <= 10; i++)
		if (temp[10][i] != 0)
			return;

	res = min(res, cnt);
}

void comb() {
	for (int i = 0; i < 1024; i++)
		solve(i);
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	for (int i = 1; i <= 10; i++)
		for (int j = 1; j <= 10; j++) {
			cin >> ch;
			if (ch == 'O')
				board[i][j] = 1;
			else
				board[i][j] = 0;
		}
	comb();
	cout << res;
}