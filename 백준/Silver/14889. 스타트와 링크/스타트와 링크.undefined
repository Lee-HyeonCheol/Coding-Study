#include <bits/stdc++.h>
using namespace std;

int N, res = INT_MAX, total;
int board[20][20];
bool isUsed[20];

int getPoint(int k) {
	int x = 0;
	for (int i = 0; i < N; i++)
		if (isUsed[i])
			x += board[i][k] + board[k][i];
	return x;
}

int vsPoint() {
	int y = 0;
	for (int i = 0; i < N; i++)
		if (!isUsed[i])
			for (int j = 0; j < N; j++)
				if (!isUsed[j])
					y += board[i][j];
	return y;
}

void solve(int A, int idx, int cnt) {
	if (cnt == N / 2) {
		res = min(res, abs(A - vsPoint()));
		return;
	}

	for (int i = idx; i < N; i++) {
		if (isUsed[i]) continue;
		isUsed[i] = true;
		int next = A + getPoint(i);
		solve(next, i + 1, cnt + 1);
		isUsed[i] = false;
	}
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++) {
			cin >> board[i][j];
			total += board[i][j];
		}
	isUsed[0] = true;
	solve(0, 1, 1);
	cout << res;
}