#include <bits/stdc++.h>
using namespace std;

int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, -1, 0, 1 };
int N, M, sy, sx;
int board[1000][1000];
int d[1000][1000];

void bfs(int sy, int sx) {
	queue<pair<pair<int, int>, int>> q;
	q.push({ {sy, sx}, 0 });
	d[sy][sx] = 0;

	while (!q.empty()) {
		int y, x, cnt;
		tie(y, x) = q.front().first;
		cnt = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];

			if (ny < 0 || nx < 0 || ny >= N || nx >= M || board[ny][nx] == 0 || d[ny][nx] != -1)
				continue;
			q.push({ {ny, nx}, cnt + 1 });
			d[ny][nx] = cnt + 1;
		}
	}
}

int main(void) {
	cin.tie(NULL);
	cout.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N >> M;
	memset(d, -1, sizeof(d));
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++) {
			cin >> board[i][j];
			if (board[i][j] == 2)
				sy = i, sx = j;
			if (board[i][j] == 0)
				d[i][j] = 0;
		}

	bfs(sy, sx);
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++)
			cout << d[i][j] << ' ';
		cout << '\n';
	}
}