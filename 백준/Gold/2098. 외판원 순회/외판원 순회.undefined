#include <bits/stdc++.h>
using namespace std;

const int INF = 123456789;
int N, VISITED_COMPLETE;
int board[16][16];
int cache[1 << 16][16];

int solution(int cur, int visited) {
	if (visited == VISITED_COMPLETE)
		return (board[cur][0] == 0 ? INF : board[cur][0]);
	int& ret = cache[visited][cur];
	if (ret != -1)
		return ret;
	ret = INF;

	bitset<16> x = visited;
	int next_key;

	for (int i = 0; i < N; i++) {
		if (x[i] || board[cur][i] == 0) continue;
		next_key = visited + (1 << i);
		ret = min(ret, board[cur][i] + solution(i, next_key));
	}
	return ret;
}

int solve() {
	VISITED_COMPLETE = (1 << N) - 1;
	memset(cache, -1, sizeof(cache));
	return solution(0, 1);
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> board[i][j];
	cout << solve();
}