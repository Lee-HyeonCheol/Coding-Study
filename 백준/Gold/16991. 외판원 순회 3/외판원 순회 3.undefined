#include <bits/stdc++.h>
using namespace std;

const double INF = 123456789;
const double epsilon = 1e-9;
int N, VISITED_COMPLETE;
double Distance[16][16];
double cache[1 << 16][16];

double solution(int cur, int visited) {
	if (visited == VISITED_COMPLETE)
		return Distance[cur][0];
	double& ret = cache[visited][cur];

	if (fabs(ret + 1) > epsilon)
		return ret;
	ret = INF;
	bitset<16> x = visited;
	int next_key;

	for (int i = 0; i < N; i++) {
		if (x[i]) continue;
		next_key = visited + (1 << i);
		ret = min(ret, Distance[cur][i] + solution(i, next_key));
	}
	return ret;
}

double solve() {
	VISITED_COMPLETE = (1 << N) - 1;
	for (int i = 0; i < 1 << N; i++)
		for (int j = 0; j < N; j++)
			cache[i][j] = -1;
	return solution(0, 1);
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N;
	vector<pair<int, int>> point(N);
	for (int i = 0; i < N; i++)
		cin >> point[i].first >> point[i].second;
	for (int i = 0; i < N; i++)
		for (int j = i + 1; j < N; j++) {
			Distance[i][j] = sqrt(pow(point[j].first - point[i].first, 2) + pow(point[j].second - point[i].second, 2));
			Distance[j][i] = Distance[i][j];
		}
	printf("%.7f", solve());
}