#include <bits/stdc++.h>
using namespace std;

struct point {
	int y, x, w;
};

struct cmp {
	bool operator() (point& a, point& b) const {
		return a.w > b.w;
	}
};

int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, -1, 0, 1 };
int N, gameNumber;

int board[125][125];
int weight[125][125];

bool is_in_range(int y, int x) {
	return y >= 0 && y < N && x >= 0 && x < N;
}

int bfs() {
	priority_queue<point, vector<point>, cmp> pq;
	pq.push({ 0, 0, board[0][0] });
	weight[0][0] = board[0][0];

	while (!pq.empty()) {
		point cur = pq.top();
		pq.pop();

		for (int i = 0; i < 4; i++) {
			int cy = cur.y + dy[i];
			int cx = cur.x + dx[i];

			if (is_in_range(cy, cx) && weight[cy][cx] > cur.w + board[cy][cx]) {
				pq.push({ cy, cx, cur.w + board[cy][cx] });
				weight[cy][cx] = cur.w + board[cy][cx];
			}
		}
	}
	return weight[N - 1][N - 1];
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	while (1) {
		cin >> N;
		if (N == 0)
			break;
		gameNumber++;
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++) {
				cin >> board[i][j];
				weight[i][j] = INT_MAX;
			}
		cout << "Problem " << gameNumber << ": " << bfs() << '\n';
	}
}