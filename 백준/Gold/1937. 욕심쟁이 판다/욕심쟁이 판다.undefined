#include <bits/stdc++.h>
using namespace std;

int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, -1, 0, 1 };
int n, res;
int board[500][500];
int dp[500][500];

bool is_in_range(int y, int x) {
	return y >= 0 && y < n && x >= 0 && x < n;
}

int dfs(int y, int x) {
	for (int i = 0; i < 4; i++) {
		int cy = y + dy[i];
		int cx = x + dx[i];

		if (!is_in_range(cy, cx) || board[y][x] >= board[cy][cx])
			continue;

		if (dp[cy][cx] != 0)
			dp[y][x] = max(dp[y][x], dp[cy][cx] + 1);
		else
			dp[y][x] = max(dp[y][x], dfs(cy, cx) + 1);
	}
	dp[y][x] = max(dp[y][x], 1);
	return dp[y][x];
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> board[i][j];

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			if (dp[i][j] == 0)
				res = max(res, dfs(i, j));

	cout << res;
}