#include <bits/stdc++.h>
using namespace std;

pair<int, int> block[5][4] = {
	{{0, 0}, {0, 1}, {0, 2}, {0, 3}},	// blue
	{{0, 0}, {0, 1}, {1, 0}, {1, 1}},	// yellow
	{{0, 0}, {1, 0}, {2, 0}, {2, 1}},	// orange
	{{0, 0}, {1, 0}, {1, 1}, {2, 1}},	// green
	{{0, 0}, {0, 1}, {0, 2}, {1, 1}}	// pink
};

int N, M, res;
int board[505][505];
int save[505][505];

void rotateBoard(int N) {	// N = max(n, m)
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			save[i][j] = board[N - j - 1][i];
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			board[i][j] = save[i][j];
}

void symmetry_x() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			save[i][j] = board[N - i - 1][j];
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			board[i][j] = save[i][j];
}

void symmetry_y() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			save[i][j] = board[i][M - j - 1];
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			board[i][j] = save[i][j];
}

void find_value(int n) {
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++) {
			for (int k = 0; k < 5; k++) {
				int val = 0, ny, nx;
				for (int t = 0; t < 4; t++) {
					ny = i + block[k][t].first;
					nx = j + block[k][t].second;
					if (board[ny][nx] == 0)
						continue;
					val += board[ny][nx];
				}
				res = max(res, val);
			}
		}
}

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	cin >> N >> M;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			cin >> board[i][j];
	for (int k = 0; k < 4; k++) {
		if (k % 2) symmetry_x();
		if (k == 2) symmetry_y();
		for (int c = 0; c < 4; c++) {
			rotateBoard(max(N, M));
			find_value(max(N, M));
		}
	}
	cout << res;
}